jQuery简介
·什么是 Javascript 库？
-Javascript 库封装了很多预定义的对象和实用函数，能帮助使用者轻松建立有高难度交互的Web2.0特性的客户端界面，并且兼容各大浏览器。
·jQuery 是一个优秀的轻量级的 Javascript 库类，是由John Resig 创建于 2006 年 1 月的开源项目。
·jQuery 之父 John Resig
· jQuery 的特点
- 轻量级
- 强大的选择器
- 出色的 DOM 操作的封装
- 可靠的事件处理机制
- 出色的浏览器兼容性
 ......
· jQuery 的核心理念是 write less，do more
· jQuery官网：www.jquery.com
·调用方法操作节点
· jQuery 编程步骤
- 引入 jQuery 的 js 文件
- 使用选择器定位要操作的节点
- 调用 jQuery 的 DOM 方法进行操作
· jQuery 库如何添加到网页中？
- src=”……”，相对路径
jQuery选择器
· 常规 JavaScript 程序模型
-获取结点对象——绑定事件函数——操作结点对象
· 在进行任何文档操作之前我们要首先获得节点对象，jQuery 选择器能彻底改变我们平时获取节点对象的方式，可以获取几乎任何含义的对象。
·jQuery 选择器语法
$(selector).action()
-美元符号: 定义 jQuery 对象，等价于 jQuery 对象
-选择符（selector）:“查询”和“查找” HTML 元素
-jQuery 的 action() 执行对元素的操作
·基本功能
-快速、精确地选择某一个（某一组）元素
-返回该元素（组）的 jQuery 包装集
·jQuery 语法
$   (  ‘  # show  ‘  )
|            |
函数        参数
||
jQuery
$(“#show”) === jQuery(“#show”)
·选择器类别划分
··基本选择器
-标签选择器： var  div  =  $(‘div’);
-类选择器：     var  className  =  $(‘.toHidden’);
-ID选择器：     var  toExten  =  $(‘#toExten’);
-群选择器：     var  nodes  =  $(‘div,  p,  ul,  ol’);
-通用选择器：  var  anyNodes  =  $(‘*’);
//选择所有span元素和id为two的元素
$(‘span,#two’).css(‘background’,’#bfa’)
··层次选择器
-后代选择器： var  td  =  $("table  td")
-子选择器：    var  td  =  $("table > td")
-兄弟选择器： var p  =  $("div + p");
··过滤选择器
-索引index从0开始
- :first  ——  $(“p:first”)  ——  第一个<p>元素
- :last  ——  $(“p:last”)  ——  最后一个<p>元素
- even  ——  $(“tr:even”)  ——  所有偶数<tr>元素
- odd  ——  $(“tr:odd”)  ——  所有奇数<tr>元素
- eq(index)  ——  $(“ul li:eq(3)”)  ——  列表中的第四个元素
- :gt(no)  ——  $(“ul li:gt(3)”)  ——  列出index大于3的元素
- :lt(no)  ——  $(“ul li:lt(3)”)  ——  列出index小于3的元素
- :not(selector)  ——  $(“input:not(:empty)”)  ——  所有不为空的input元素
··表单选择器
- :input  ——  $(“:input”)  ——  所有<input>元素
- :text  ——  $(“:text”)  ——  所有type=”text”的<input>元素
- :password  ——  $(“:password”)  ——  所有type=”password”的<input>元素
- :radio  ——  $(“:radio”)  ——  所有type=”radio”的<input>元素
- :checkbox  ——  $(“:checkbox”)  ——  所有type=”checkbox”的<input>元素
- :submit  ——  $(“:submit”)  ——  所有type=”submit”的<input>元素
- :reset  ——  $(“:reset”)  ——  所有type=”reset”的<input>元素
- :button  ——  $(“:button”)  ——  所有type=”button”的<input>元素
- :image  ——  $(“:image”)  ——  所有type=”image”的<input>元素
- :file  ——  $(“:file”)  ——  所有type=”file”的<input>元素
·jQuery 包装集
- 使用 jQuery 选择器获取的对象为 jQuery 包装集（jQuery 对像）
- 在 jQuery 对象中无法使用 DOM 对象的任何方法
- 反之 DOM 对象也无法使用任何 jQuery 的方法
·包装集的 length 属性
- 作用：获取元素个数
- 使用：$(“.username”).length
·jQuery 对象和 DOM 对象转化
- DOM→jQuery：使用  $( )  包装
var divNode = document.getElementById(‘show’);
var div = $(divNode);
- jQuery→DOM：数组下标方式、get( )方法获得
var div = $(‘#show’);
var divNode = div.get(0);//或 var divNode = div[0];
jQuery的DOM操作
· jQuery 中的 DOM 操作 
- 第一步：获取节点
- 第二步：DOM操作
··文本内容
--获取: html()  设置: html(value) —— 类似 innerHTML 属性的用法
--获取: val()    设置: val(value) —— 应用于表单元素
··属性操作 
--获取: attr(attributeName) —— 获取匹配集合中的第一个元素的属性的值
 --设置: attr(attributeName，value) —— 设置全部匹配元素的一个属性
             attr({
                  attributeName:value,
                  attributeName:value
               })  —— 设置全部匹配元素的多个属性
--删除: removeAttr("title") 
             removeAttr("title id class") 
··样式操作
-- jQuery 样式操作可以对行内样式、页内样式、外部样式操作
--获取: css("propertyName")   css([propertyName,propertyName])
--设置: css("propertyName"，"value") 
             css({
                   propertyName : value,
                   propertyName : value
              }) 
--操作样式除了 css() 方法之外，我们还可以把样式写在 class 中，通过添加、切换、删除 className 的方式操作样式
--添加:  addClass("red")   addClass("red green blue") 
--删除:  removeClass(“red”)   removeClass(“red green”)   removeClass()
--判断:  hasClass("red") 
--切换:  toggleClass("red")
··遍历节点
-- children()    ——  获取匹配元素的子元素集合 
--eq(index)    ——  获取匹配元素的集合中指定索引的那一个元素
--parent()      ——  获取匹配元素集合中，每个元素的父元素
--parents()    ——  获得集合中每个匹配元素的祖先元素 
--next()         ——  获得匹配的元素紧邻的后面同辈的元素 
--nextAll()     ——  获得匹配元素所有下面的同辈元素
--siblings()    ——  获得匹配元素集合中每个元素的兄弟元素
--prev()         ——  获取匹配元素紧邻的前一个同辈兄弟元素
··节点操作
--创建节点:   var li = $("<li title='香蕉' >香蕉</li>") ;
--插入节点
---$("p").append("<span>最后一个子节点</span>"
---$("<span>最后一个子节点</span>").appendTo("p")
--删除节点:  $("ul li:eq(1)").remove()    $("ul li").remove(":eq(1)")
--替换节点:  $("p").replaceWith("<span>替换节点</span>")
··位置操作
-- offset() 
---相对于当前窗口的偏移距离
---返回值为对象，含有 top、left 两个属性
--position() 
---相对于定位父元素的偏移距离
---返回值为对象，含有 top、left 两个属性
--scrollTop() —— 获取匹配的元素集合中第一个元素的当前垂直滚动条的位置
--scrollTop( value ) —— 设置每个匹配元素的垂直滚动条位置 
--scrollLeft() —— 获取匹配的元素集合中第一个元素的当前水平滚动条的位置
--scrollLeft( value ) ——设置每个匹配元素的水平滚动条位置
jQuery事件和事件对象
·事件是指可以被 JavaScript 侦测到的行为。
·JavaScript 原生事件和 jQuery 中的事件是一致的，唯一不同是调用和处理事件的方式不同。
- ready  ——  文档就绪事件（当 HTML 文档就绪可用时）
- click  ——  鼠标单击事件
- mouseover  ——  鼠标移上事件
- mouseout  ——  鼠标移开时间
- mousemove  ——  鼠标在元素上移动事件
- blur  ——  元素失去焦点事件
- focus  ——  元素获得焦点事件
·$(document).ready( ) 方法和 window.onload 事件功能相似，但是也有区别
-执行时机
··window.onload: 在网页中所有的元素（包括所有关联文件）完全加载到浏览器后执行
··$(document).ready( ): 在DOM完全加载以后就可以调用
-事件编写个数
··window.onload 事件不能同时编写多个
··$(document).ready( ) 方法能同时编写多个
·$(document).ready( ) 方法和 window.onload 事件功能相似，但是也有区别
-简化写法
··window.onload 事件没有简化写法
··$(document).ready( ) 方法有简化写法
· 给对象添加事件方法
- $("selector") . on( EventName ，handler）
-$("selector") . EventName ( handler );
·移出事件方法
-$("selector") . off( events [, handler ]）
-off() 方法移除用.on()绑定的事件处理程序 
· hover(fn1，fn2)
-当鼠标指针进入和离开元素时被执行 
· jQuery 在封装 event 对象的时候，解决了兼容性问题，并且还创建了一些非常好用的属性和方法
·事件对象属性
-type  ——	获取这个事件的事件类型，例如：click
-target  ——	获取冒泡前触发事件的 DOM 元素
-currentTarget  —— 	获取绑定事件的 DOM 元素，等同与 this
-relatedTarget  —— 	获取移入移出目标点离开或进入的那个 DOM 元素
-pageX/pageY  ——	获取相对于页面原点的水平/垂直坐标
-which  —— 	获取鼠标的左中右键(1,2,3)，或获取键盘按键
-data  ——	获取事件调用时的额外数据
·事件对象方法
-阻止冒泡行为  event.stopPropagation()
-阻止默认行为  event.preventDefault()
· $.ajax( {键值对集合} )方法
$.ajax({
        type: "get",//请求方式
        url: '',//请求地址
        dataType: 'json',//指定数据类型
        success: function (data) {//数据返回成功执行函数
            console.log(data)
        }
    })
· $.post( ) —— post 请求
$.post(url,
       function (data) {//数据返回成功执行函数
            console.log(data)
       }
)
· $.get( )   —— get 请求
$.get(url,
       function (data) {//数据返回成功执行函数
            console.log(data)
       }
)
jQuery动画
· 隐藏和显示 —— show( ) 和 hide ( )方法
-$(‘p’).hide()  ——  隐藏p元素
··P本身为块级元素，display：block
··“隐藏”的实质是将display:block转化为display:none
-$(‘p’).show() —— 显示p元素
··“显示”其实是将该元素重新改回  display：block
- 不传参
-参数为关键字 —— slow(600) normal(400) fast(200)
··show("slow")  hide("fast")
-参数为数字 —— 单位毫秒
··show(1000)  hide(2000)
-注：  jQuery 中的任何动画效果，都可以指定三种速度参数： “slow” 、”normal”、“fast”
·若只改变“内容”的hide()方法同时减少了“内容”的哪些属性？
-高度、宽度、不透明度
· 滑动 —— slideUp( ) 和 slideDown( )方法
- 改变元素的高度
- jQuery 代码如下:
$("p"). slideUp()
$("p"). slideDown ()
· 切换 —— slideToggle( )方法
- 通过高度变化来切换匹配元素的可见性
$("button").click(function (){
     $("p").slideToggle()
})
·fadeTo( )方法
- 把元素的不透明度以渐近的方式调整到指定的值
· 自定义动画 —— animate(styles, speed ,callback)
-styles  —— 包含样式属性及值得对象
-speed    —— 速度参数
-callback —— 回调函数，在动画完成时触发执行
· 累加累减动画 ——“+=”，“-=”
-表示在当前位置基础上 累加 或者 累减
·多重动画 —— 多个效果同时实现
- 多个样式属性及属性值
· 多重动画 —— 多个效果顺序实现
- 多个 animate() 方法链式书写
· 综合动画
- 当为同一组元素使用多重效果时，通过链式写法实现效果排队
- 只有数字值可以创建动画，字符串值无法创建动画（比如'background:red')
·若最后一步想实现效果为: css("border"，"5px solid blue")
-css()方法不会加入到动画列队中，而是立即执行
· animate(styles,speed,callback)
- callback —— 回调函数，在动画完成时触发执行
- 使用回调函数对非动画方法实现效果排队
- callback 回调函数适用于 jQuery 所有的动画效果方法
·延迟动画 —— delay()
