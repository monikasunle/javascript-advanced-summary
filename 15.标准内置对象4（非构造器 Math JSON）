Math
· Math 对象包含了一系列的数学运算的功能
-Math 对象不需要创建，直接使用
·常用操作
-四舍五入:  Math. round( )
-向下取整:  Math.floor( )      向上取整:  Math.ceil( )
-生成 [0~1) 随机数:  Math.random( )
-取最大值:  Math.max( )       取最小值:  Math.min( )
·Math原型链
typeof Math
<- “object”
Math.__proto__==Object.prototype
<-true
数据交换格式
·数据交换格式
-在日常生活中，人与人之间的交流需要彼此都听得懂得语言。同理，在计算机的不同程序之间，或者不同的编程语言之间进行交换数据，也需要一种大家都能听得懂得‘语言’，这就是数据交换格式，它通过文本以特定的形式来进行描述数据。
-XML 与 JSON
·XML 
-XML 指可扩展标记语言（EXtensible Markup Language）
-XML 是一种标记语言，很类似 HTML
-XML 的设计宗旨是传输数据，而非显示数据
-XML 标签没有被预定义。您需要自行定义标签。
-XML 被设计为具有自我描述性。
·XML 被设计用来传输和存储数据。
·HTML 被设计用来显示数据
·XML书写准则
-xml文件的第一行必须是声明该文件是xml文件以及它所使用的xml规范版本。在文件的前面不能够有其它元素或者注释。
-在xml文件中有且只能够有一个根元素。
-xml文件中，用的大多都是自定义的标记。
-在xml文件中的标记必须正确地关闭
-标记之间不得交叉。
-属性值必须要用“ ”号括起来。
-控制标记、指令和属性名称等英文要区分大小写
JSON
·21世纪初，Douglas Crockford 寻找一种简便的数据交换格式，能够在服务器之间交换数据。当时通用的数据交换语言是 XML，但是 Douglas Crockford 觉得 XML 的生成和解析都太麻烦，所以他提出了一种简化格式，也就是JSON。
·JSON 的规格非常简单，只用一个页面几百个字就能说清楚，而且 Douglas Crockford 声称这个规格永远不必升级，因为该规定的都规定了。
·JSON（JavaScript Object Notation）
-JSON 指的是 JavaScript 对象表示法
-JSON 是轻量级的文本数据交换格式
-格式由道格拉斯（ Douglas Crockford） 提出
-从 JavaScript 脚本语言中演变而来
-JSON 独立于语言和平台
-文件名扩展是 .json
-更小、更快，更易解析
-是一种数据格式，不是编程语言
··虽然具有相同的语法形式，但 JSON 并不从属于 JavaScript
··并不是只有 JavaScript 才使用 JSON，JSON 只是一种数据格式
··很多编程语言都有针对 JSON 的解析器和序列化器
·JSON语法
-并列的数据之间用逗号（", "）分隔
-并列数据的集合（数组）用方括号("[]")表示
-映射用冒号（": "）表示
-映射的集合（对象）用大括号（"{}"）表示
·字符串必须加双引号
·JSON 语法可以表示以下三种类型的值
-简单值 
··与 JavaScript 语法相同，可以在 JSON 中表示字符串、数值、布尔值和 null。
··JSON 不支持 JavaScript 中的特殊值 undefined。 
-对象 
··一种复杂数据类型，表示一组无序的键值对。
··键值对中的值可以是任意类型——简单值、对象或数组。
-数组 
··一种复杂数据类型，表示一组有序的值的列表。
··数组的值可以是任意类型——简单值、对象或数组。
·JSON与JS对象
-JSON是JavaScript 对象的字符串形式的表示法，使用文本表示 JavaScript对象的信息，本质是一个字符串
·JSON静态方法
-JSON.stringify(object [,replacer [,space] ] )方法
··把 JavaScript 对象格式转化为 JSON 字符串
··undefined 值会被忽略
··object：指定转换对象
·· replacer：参数过滤器为数组时，结果只包含数组中列出的属性
··replacer：参数过滤器为函数时，需接受两个参数，属性键名和属性值
··space：参数为数值时，表示每个级别缩进的空格数
··space：参数为字符串时，使用字符串作为缩进字符
-JSON.parse(json [,reviver])方法
··把JSON字符串解析为原生JavaScript对象
··json：参数必须是有效的 JSON，否则会报错
··reviver：参数过滤器为函数时，需接受两个参数，属性键名和属性值
·JSON原型链
typeof JSON;
<- “object”
JSON.__proto__===Object.prototype;
<-true
JSON.__proto__.__proto__===null;
<-true
JSON.__proto__.toString===Object.prototype.toString;
<-true
JSON.toString()
<-”[object JSON]”
JSON.__proto__.valueOf===Object.prototype.valueOf;
<-true
