函数是什么
-函数是可以通过外部代码调用的一个“子程序”。
-一个函数由称为函数体的一系列语句组成。值可以传递给一个函数，函数将返回一个值。
-函数定义方式
-通过函数声明的形式来定义
-通过函数表达式的形式来定义
-通过 Function 构造函数实例化的形式来定义
·通过 Function 构造函数创建函数
··可以传入任意数量的实参
··最后一个实参为函数体
··函数体中 javascript 语句之间分号隔开
··Function 构造函数创建一个匿名函数
函数定义三要素
-函数名：如 alert、 parseInt 、……
-函数的参数：传递给函数名的值，代表将被函数处理的数据
-函数的返回值：函数执行的返回结果
匿名函数
-单独的匿名函数是无法运行的
-可以把匿名函数赋值给变量或立即执行
具名函数优势
-当遇到错误时，堆栈跟踪会显示函数名，容易寻找错误
代理函数名
-是可有可无的"代理"函数名
-代理函数名的作用域是只能在函数的主体( FunctionBody )内部
name属性
-返回函数实例的名称
length 属性
-length 属性指明函数定义的形参个数
函数的参数
-JavaScript 函数在定义时有固定数目的命名参数，但当调用这个函数时，传递给它的参数数目却可以是任意的。
arguments 对象
-代表传入函数的实参
-是函数中的局部变量
-不能显式创建，只有函数调用时才可用
-它是一个类数组对象
类数组对象
-与数组一样具有 length 与 index 属性
-本质却是个 Object
arguments与形参的“双向绑定”特性
-在调用时 arguments 对象与实际传递了值的形参变量发生双向绑定
-arguments 对象中的对应单元会和命名参数建立关联
arguments 的 length 属性
-表示函数调用时传入的实参数量
-在调用时，实参个数确定， arguments.length 确定， 不会再发生改变
函数对象
·函数是对象，对象是一系列属性和方法的集合。
·属性
 -name、length
·方法
 -toString、valueOf
 -call、apply
·toString 方法
-返回一个表示当前函数源代码的字符串
·valueOf 方法
-返回函数本身
·函数的计算
-与 Number 结合计算
-与 String 结合计算
-与 Boolean 结合计算
·this 关键字
-在 function 内部被创建
-指向调用时所在函数所绑定的对象
-this 不能被赋值，this 的值取决于函数被调用的方式
call() 方法
-语法： fn.call(thisObj，arg1，arg2，...)
-参数： arg1,arg2,...：被调用函数的实参
        thisObj：将函数对象中的 this 指向 thisObj 对象
-说明：  1. 如果 thisObj 未传递，this 指向全局对象 window
2.如果传递为 undefined/null，this 指向全局对象 window
3. 如果传递为数字，字符串，布尔值，this 指向该原始值的包装对象   
-返回值：与 fn 普通调用相同
-作用：调用函数，并改变函数执行的 this 指向
apply () 方法
-语法： fn.apply(thisObj，[arg1，arg2，...])
-参数： arg1,arg2,...：被调用函数的实参
        thisObj：将函数对象中的 this 指向 thisObj 对象   
-说明：  1. 如果 thisObj 未传递，this 指向全局对象 window
2. 如果传递为 undefined/null，this 指向全局对象 window
        3. 如果传递为数字，字符串，布尔值，this 指向该原始值的包装对象  
-返回值：与 fn 普通调用相同
-作用：调用函数，并改变函数执行的 this 指向
 bind () 方法
-语法： fn.bind(thisObj，arg1，arg2,...)   
-参数：当绑定函数调用时，thisObj 参数作为原函数运行时的 this 指向。
arg1,arg2,...  当绑定函数被调用时，这些参数加上绑定函数本身的参数会按照顺序作为原函数运行时的参数。（预设参数）
-返回值：返回一个原函数的拷贝（绑定函数），并拥有指定的 this 值和初始参数 
- bind 不会调用函数，即不会执行原函数中的代码
函数的调用
-函数调用形式（4种）
·作为函数直接调用
··定时器函数
··立即执行函数
·作为对象方法调用
··事件函数
·作为构造函数调用
··通过 call/apply 间接调用
