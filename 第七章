闭包
·闭包（closure）
-函数与对其词法环境的引用共同构成闭包。
-闭包是由函数以及创建该函数的词法环境组合而成。这个环境包含了这个闭包创建时所需访问的所有局部变量。
·闭包的作用
-可通过闭包访问函数作用域内的局部变量
-使函数中的变量被保存在内存中不被释放
·闭包的缺点
-由于闭包会使得函数中的变量都被保存在内存中，内存消耗大
-闭包会在父函数外部，改变父函数内部变量的值
·闭包的应用
-IIFE——解决变量共享、变量污染问题
·闭包的常见形式
-以普通函数形式返回
-作为对象的方法返回
this绑定
·this
- this 是被自动定义在所有函数的作用域中一个关键字
-this 是在函数运行期间绑定，与函数定义无关
·this 作用
-复用代码，为函数自动引用合适的上下文对象
-提供了一个更加优雅而简便的方式来隐式传递一个对象引用
·this 绑定规则
··函数调用形式（4种）
-作为函数直接调用  ——  默认绑定
--定时器函数
--立即执行函数
-作为对象方法调用  ——  隐式绑定
--事件函数
-作为构造函数调用  ——  new绑定
-通过 call/apply 间接调用  ——  显式绑定
·默认绑定
-普通函数调用
-函数嵌套时，需注意this不进行作用域传递
-函数嵌套时，this 绑定
--变量 _this、that、self  锁定  this
--bind() 锁定
·隐式绑定
-调用位置是否有上下文对象。
--函数作为对象的方法调用时，函数上下文指向这个对象
--数组中存放函数，被数组索引调用，this上下文指向这个数组
·绑定优先级
-new 绑定 > 显式绑定 > 隐式绑定 > 默认绑定
-判断 this 的顺序
new关键字——是——new绑定
        ——否——call/apply——是——显示绑定
                       ——否——对象调用——是——隐式绑定
                                         ——否——普通绑定
严格模式
·严格模式
-严格模式是采用具有限制性 JavaScript 变体的一种方式
-严格模式可以应用到整个脚本或个别函数中
·开启严格模式
-整个脚本文件开启严格模式，需要在所有语句之前放一个特定语"use strict";
-某个函数开启严格模式，得把 "use strict"; 声明放在函数体所有语句之前
·严格模式对 JavaScript 的语法和行为，都做了一些改变
-普通模式中，如果一个变量没有声明就赋值，默认是全局变量
 严格模式下，禁止这种用法，变量必须先声明再使用
-普通模式中，在全局作用域函数中的 this 指向 window 对象
 严格模式下，全局作用域中函数中的 this 是 undefined
-普通模式中，构造函数不加 new 也可以调用，this 指向全局对象
 严格模式下，构造函数不加 new 调用，this 报错
-普通模式中，函数允许参数重名
  严格模式下，函数参数不允许重名
函数形式
·纯函数
-一个函数的输出不受外部环境影响，同时也不影响外部环境时，只关注逻辑运算和数学运算，同一个输入总得到同一个输出。
-相同的输入得到相同的输出
-不会产生副作用
·高阶函数
-对其他函数进行操作的函数
-函数的参数为函数
-函数的返回值为函数
-在封装一个函数时，对于一个不确定的变量，我们使用传递参数的方式来指定。
-在封装一个函数时，对于一个不确定的过程，我们向函数中传入另一个函数来指定
·回调函数（Callback）
-一个函数被作为参数传递给另一个函数（在这里我们把另一个函数叫做“otherFunction”），回调函数在 otherFunction 中被调用。
-回调函数并不会马上被执行。它会在包含它的函数内的某个特定时间点被“回调”（比如定时器）
