标识符
-标识符是代码中用来标识变量、函数、或属性的字符序列
-命名规则：
·由字母、数字、下划线和$符号组成
·不能以数字开头
·大小写敏感（区分大小写）
标识符不能和JavaScript其他关键字同名
关键字不能作为标识符
保留字在某种意思上是为将来的关键字而保留的单词。因此保留字不能被用作变量名或函数名
属性命名
·访问对象属性方式
-通过点号(.)运算符
--点号要求后面的属性名是合法的标识符，对于不合法的不可以使用
-通过中括号([])运算符
--中括号要求的则是一个字符串即可，不必是合法的标识符
window对象的属性
-全局变量是 window 对象的属性
-全局函数是 window 对象的方法
运算符
运算符的优先级决定了表达式中运算执行的先后顺序，优先级高的运算符最先被执行
字面量（直接量）
字面量，就是表示自身的常量
表达式
表达式将产生一个值，用于需要值的地方
函数表达式
-以function关键字开始的是函数声明
-只要在function关键字前面有任何其他元素，就会从函数声明转变为函数表达式
-函数声明时函数的名字不可缺少
函数调用表达式 返回值
-无return语句，—— undefined
-return语句后不带表达式， —— undefined
-return语句后带表达式， —— 表达式
立即执行表达式
-在 function 前面加！、+、 - 甚至是逗号等到都可以起到识别为函数表达式的效果
-在这些运算符中加括号是最安全的做法，因为它不会改变函数的返回值。
逻辑运算符
-逻辑运算符两边的操作数都是布尔类型
-对于&&来说， 除了两侧都为真时为真，其他情况都为假
-对于 | | 来说， 除了两侧都为假时为假，其他情况都为真
-当逻辑运算符 && 和 || 两侧的操作数不是布尔类型时
·首先将左操作数转换成布尔类型
·对转换后的左操作数进行逻辑判断（true or false）
·根据短路原则返回原始左操作数或原始右操作数
··短路原则
···对于 &&，转换后的左操作数若为 true，则直接返回原始右操作数，若为 false 则直接返回原始左操作数
···对于 | |，转换后的左操作数若为 true，则直接返回原始左操作数，若为 false 则直接返回原始右操作数
相等运算符
-JavaScript 有两种比较方式：严格比较运算符和宽松比较运算符。
-严格相等运算符（===）
·仅当两个操作数的类型相同且值相等为 true
-宽松相等运算符（==）
·在进行比较之前，将两个操作数转换成相同的类型
递增递减
-递增（++）
·递增运算符为其操作数增加1，返回一个数值
·如果使用后置（postfix），即运算符位于操作数的后面（如 x++），那么将会在递增前返回数值
·如果使用前置（prefix），即运算符位于操作数的前面（如 ++x），那么将会在递增后返回数值
-递减（--）
·递减运算符为其操作数减去1，返回一个数值
赋值运算符
-基于右值（right operand）的值，给左值（left operand）赋值
-左值：“=”运算符的左操作数
-右值：“=”运算符的右操作数
-赋值表达式的返回值为右操作数
复合赋值
 x += y       ——         x  = x + y
 x -= y       ——         x  = x - y
 x *= y       ——         x  = x * y
 x /= y       ——          x  = x / y
 x %= y       ——         x  = x % y
逗号操作符
对它的每个操作数求值（从左到右），并返回最后一个操作数的值
