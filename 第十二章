Number
·Number 包装对象
-当访问 Number 基本数据类型属性或方法时创建临时包装对象，访问的都是对象中的属性或方法
-访问对象属性时，首先访问自身属性，访问不到时，则会在原型链上寻找对应的属性和方法
·原型方法
-Number.prototype.toFixed(...)
-Number.prototype.toPrecision(...)
-Number.prototype.toString(...)
-Number.prototype.toExponential(...)
·静态属性
-Number.MAX_VALUE    Number.MIN_VALUE
-Number.NaN   Number.NEGATIVE_INFINITY
-Number.POSITIVE_INFINITY
Boolean
·Boolean 包装对象
-当访问 Boolean 基本数据类型属性或方法时创建临时包装对象，访问的都是对象中的属性或方法
-访问对象属性时，首先访问自身属性，访问不到时，则会在原型链上寻找对应的属性和方法
·所有对象都是真值
String
-字符串变量是由双引号或单引号来声明。
-字符串是不可更改的，故字符串的方法返回的都是全新的字符串没有改变原始字符串。
-字符串的方法书写符合小驼峰命名法。
·String 包装对象
-当访问 String 基本数据类型属性或方法时创建临时包装对象，访问的都是对象中的属性或方法
-访问对象属性时，首先访问自身属性，访问不到时，则会在原型链上寻找对应的属性和方法
·静态方法
-String.fromCharCode(97,98,99);
·原型方法
-String.prototype.trim( );
-String.prototype.concat(str1?,str2?);
-String.prototype.toLowerCase( ); String.prototype.toLocaleLowerCase( );
-String.prototype.toUpperCase( ); String.prototype.toLocaleUpperCase( );
-String.prototype.indexOf(searchingString,position?);
-String.prototype.lastIndexOf(searchingString,position?);
-String.prototype.search(regexp);
-String.prototype.match(regexp);
-String.prototype.replace(regexp); 
Function
·函数定义
-通过函数声明的形式来定义
-通过函数表达式的形式来定义
-通过 Function 构造函数实例化的形式来定义
·函数调用
-作为函数直接调用
-作为对象方法调用
-作为构造函数调用
-通过 call/apply 间接调用
·静态属性
-Function.length
-Function.name
·原型方法
-Function.prototype.apply()
-Function.prototype.bind()
-Function.prototype.call()
-Function.prototype.toString()
Object
·静态方法
-Object.create()
-Object.defineProperties()
-Object.defineProperty()
-Object.getOwnPropertyDescriptor()
-Object.getOwnPropertyDescriptors()
-Object.getOwnPropertyNames()
-Object.getPrototypeOf()
-Object.setPrototypeOf()
·原型方法
-Object.prototype.hasOwnProperty()
-Object.prototype.isPrototypeOf()
-Object.prototype.propertyIsEnumerable()
-Object.prototype.toString()
-Object.prototype.valueOf()
Date
·Date 提供了解析、管理和展示时间的功能
-Date 对象基于1970年1月1日（世界标准时间）起的毫秒数
-以常规函数调用它（即不加 new 操作符）将会返回一个字符串，而不是一个日期对象
-Date 对象没有字面量格式
· Date构造器方法（静态方法）
-Date.now()
-Date.parse()
·原型方法
-Date.prototype.get<Unit>( )   
-Date.prototype.set<Unit>( )   
-Date.prototype.toLocalTimeString( )  
-Date.prototype.toString( )  
-Date.prototype.toLocalString( ) 
·时间戳(timestamp)
-时间戳是指格林威治时间1970年01月01日00时00分00秒(北京时间1970年01月01日08时00分00秒)起至现在的总毫秒数
-时间转换成时间戳
··Date.now()
··(new Date()).getTime() 
-时间戳转换成时间
··new Date(timestamp)
·时间戳格式不容易看懂，如何将其转换为熟悉的时间格式？
·日期处理插件 Moment.js
