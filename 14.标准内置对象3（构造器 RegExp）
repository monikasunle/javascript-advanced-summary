正则表达式简介
·正则表达式（Regular Expression）
-JavaScript中的RegExp对象
-正则
··规律、规则
-表达式
··由一些普通字符和特殊字符组成
-强大的字符串匹配工具 
·正则表达式
-对字符串操作的一种逻辑公式
-用事先定义好的一些特定字符、及这些特定字符的组合，组成一个规则字符串，这个规则字符串用来表达对字符串的一种过滤逻辑
-正则表达式是匹配模式，要么匹配字符，要么匹配位置
·正则表达式用途
-批量提取/替换有规律的字符串
-验证客户端的输入数据
-各类办公软件中使用
-各种开发语言中使用
··（C# / Java /JS / Perl / PHP / Python等）
-网络爬虫（抓取机器人）的开发
·正则表达式测试工具
-https://regex101.com/
-https://jex.im/regulex/
·创建正则表达式
-new 运算符        new RegExp(pattern, flags)
··var box = new RegExp('box');         //第一个参数字符串
··var box = new RegExp('box','ig');   //第二个参数可选模式修饰符
-字面量方式       /pattern/ flags
··var box = /box/;       //直接用两个反斜杠
··var box = /box/ig;    //在第二个斜杠后面加上模式修饰符
·修饰符
-每个正则表达式都可带一个或多个标志（flags）,标明正则表达式的行为
l     ——     忽略大小写
g     ——     全局匹配
m     ——     多行匹配
·转义字符
-元字符是具有特殊含义的字符，不能直接匹配使用的，必须使用反斜线（\） 作为前缀进行转义后才能使用
-字符串、正则表达式字面量、正则表达式构造函数都使用反斜线（\） 作为转义字符的前缀
·一般不推荐使用构造函数生成正则，而应该优先使用字面量。
-var pattern = new RegExp("^\\d+","g"); //注意，反斜杠需要转义
-var pattern =/^\d+/g
-构造函数会需要多写一个 \
-构造函数的匹配模式可以使用变量，但是字面量不能够使用变量代替
·RegExp 原型方法
-test()
··检索字符串中指定的值，返回true或false
··regObject.test(str)
-exec()
··检索字符串中指定的值，返回找到的值，并确定其位置
··regObject.exec(str)
·String 原型方法
-replace()
··strObject.replace(regexp,'replaceString'); 
··对字符串中特定格式的子串进行替换，返回替换后的结果
··第一个参数既可以是一个固定的子串，也可以是一个正则表达式对象
-match()
··strObject.match(regexp); 
··一个或多个子串、正则表达式的匹配
··返回一个数组
-search()
··strObject.search(regexp); 
··返回第一次出现匹配指定正则表达式子串的下标，若没有匹配则返回 -1
··indexOf() 作用类似，但 indexOf() 不支持正则表达式
-split()
··strObject.split(regexp,[howmany]); 
··用一个指定的字符串或正则表达式，对原字符串进行拆分，返回拆得的子串数组
··若指定了 howmany 属性，则只返回拆得的前 howmany 个子串
正则表达式符号
·元字符
-元字符是拥有特殊含义的字符
.     ——     匹配任意单个字符，换行符除外
\w    ——     匹配字母、数字、下划线（字符）
\W    ——     匹配非字母、数字、下划线（非字符）
\d    ——     匹配数字
\D    ——     匹配非数字
\s    ——     匹配空格字符
\S    ——     匹配非空格字符
\n    ——     匹配换行符
·锚字符
-锚字符用于查找某个位置
··位置是指字符串中每行第一个字符的左边、最后一个字符的右边以及相邻字符的中间
··对于位置的理解，我们也可以理解成空字符""
^        ——      匹配字符串的开头
··从字符串的开头开始匹配，即从左向右匹配
··示例：验证 URL 是否遵循 https 协议
$        ——      匹配字符串的结尾
··从字符串的结尾开始匹配，即从右向左匹配
··示例：验证文件是否是 css 文件
\b       ——      匹配字符串的边界
··\w 与 \W 之间的位置
··\w 是字符组 [0-9a-zA-Z_] 的简写形式
··\W 是排除字符组 [^0-9a-zA-Z_] 的简写形式
··^ $ 位置也是边界
··示例：
···文本: “You shouldn't let that cat scattered kids' food all over the room. ” 
···将文本中的单词 cat 换成 dog
\B       ——      匹配字符串的非边界
-零宽断言
(?=exp)    ——      匹配其后紧接exp的字符串
--零宽度正预测先行断言
--断言此位置的后面能匹配表达式 exp
(?!exp)    ——      匹配其后没有紧接exp的字符串
--零宽度负预测先行断言
--断言此位置的后面不能匹配表达式 exp
··exp在这里代表任意表达式
··示例：匹数字的千位分隔符表示法 "12345678" 变成 "12,345,678"
·方括号
-方括号用于查找某个范围内的字符
[abc]      ——      匹配方括号字符集中的任何字符
[^abc]     ——      匹配任何不在方括号字符集中的任意字符
[0-9]      ——      匹配任何从0到9的数字
[a-z]      ——      匹配任何从小写a到小写z的字符
[A-Z]      ——      匹配任何从大写A到大写Z的字符
[A-z]      ——      匹配任何从大写A到小写z的字符
-[A-z0-9_] 匹配英文字母、数字、下划线
- [A-z0-9_]    ——    \w
-[^A-z0-9_]    ——    \W
-[0-9]        ——    \d
-[^0-9]       ——     \D
·量词
-量词是定义字符出现频次的字符
n+       ——      匹配任何包含至少一个n的字符串
n*       ——      匹配任何包含0个或多个n的字符串
n?       ——      匹配任何包含0个或一个n的字符串
n{x}      ——      匹配包含x个n的序列的字符串
n{x,}      ——      匹配包含至少x个n的序列的字符串
n{x,y}     ——      匹配包含x到y个n的序列的字符串
·贪婪和惰性
贪婪匹配   ——   惰性匹配
+          ——     +?
*          ——     *?
?          ——     ??
{x,}        ——     {x,}?
{x,y}       ——      {x,y}?
·选择和分组
exp1|exp2|exp3    ——    使用|进行条件选择，查找任何指定的选项
(exp1)          ——     括号中的表达式可以作为一个整体
正则静态属性
·正则静态属性
-RegExp.$1-$9
-RegExp.input ($_)
-RegExp.lastMatch ($&)
-RegExp.lastParen ($+)
-RegExp.leftContext ($`)
·正则实例属性
-patten.flags
-patten.global
-patten.ignoreCase
-patten.multiline
-patten.lastIndex 
-patten.source
正则表达式练习
·匹配 16 进制颜色值
-表示一个 16 进制字符，可以用字符组 [0-9a-fA-F] 
-其中字符可以出现 3 或 6 次，需要是用量词和分支结构（分组）
-使用分支结构时，需要注意顺序
·匹配时间
-共 4 位数字
-第一位数字可以为 [0-2] 
-当第 1 位为 "2" 时，第 2 位可以为 [0-3]，其他情况时，第 2 位为 [0-9] 
-第 3 位数字为 [0-5] 
-第 4 位为 [0-9]
·匹数字的千位分隔符表示法 "12345678" 变成 "12,345,678"	
-找到相应的位置，替换成"，" 
··弄出最后一个逗号
···(?=(\d{3})$) 匹配 \d{3}$ 前面的位置。而 \d{3}$ 匹配的是目标字符串最后那 3 位数字
··弄出所有的逗号
···因为逗号出现的位置，要求后面 3 个数字一组，也就是 \d{3} 至少出现一次,使用量词 +
··要求匹配的到这个位置不能是开头 —— (?!^)
·常用正则表达式
-/\w+((-\w+)|(\.\w+))*\@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+/ （邮箱）
-/^[A-Za-z0-9_-]+$/ （密码）
-/((?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d?\d))/ （IP地址）
-/(.*)\.(rar|zip|7zip|tgz)$/ （压缩格式）
-/(.*)\.(jpg|bmp|gif|ico|pcx|jpeg|tif|png|raw|tga)$/ （图片判断）
-/^#[a-fA-F0-9]{6}$/ （颜色值）
-/^[A-Za-z0-9_\-\u4e00-\u9fa5]+$/ （用户名）
-/0?(13|14|15|18)[0-9]{9}/ （手机号）
-/^[A-Za-z0-9_()（）\-\u4e00-\u9fa5]+$/ （公司名称）
