HTTP协议
·Web 使用一种名为 HTTP（HyperText Transfer Protocol，超文本传输协议）的协议作为规范，完成从客户端到服务器端等一系列运作流程。而协议是指规则的约定。可以说，Web 是建立在 HTTP 协议上通信的。
·HTTP 是一种不保存状态，即无状态（stateless）协议。HTTP 协议自身不对请求和响应之间的通信状态进行保存。也就是说在 HTTP 这个级别，协议对于发送过的请求或响应都不做持久化处理。
·HTTP 协议规定，请求从客户端发出，最后服务器端响应该请求并返回。
·请求报文
- 请求报文是由请求方法、请求 URI、协议版本、可选的请求首部字段和内容实体构成的。
·响应报文
-响应报文基本上由协议版本、状态码（表示请求成功或失败的数字代码）、用以解释状态码的原因短语、可选的响应首部字段以及实体主体构成。
·URI（Uniform Resource Identifier）
-统一资源标识符
-格式：http（协议方案名）://user:pass（登录信息）@www.example.jp（服务器地址）:80（服务器端口号）/dir/index.htm（带层次的文件路径）?uid=1（查询字符串）#ch1（片段标识符）
·URL转义
-全局方法
··encodeURI  ——  把字符串作为 URI 进行编码
··decodeURI  ——  可对 encodeURI() 函数编码过的 URI 进行解码
·方法（Method）—— 告知服务器意图的 HTTP 方法
-GET ：获取资源
-POST：传输实体主体
-PUT：传输文件
-DELETE：删除文件
-HEAD：获得报文首部
-OPTIONS：询问支持的方法
·指定请求的资源按期望产生某种行为，使用方法下达命令
·状态码
- HTTP 状态码负责表示客户端 HTTP 请求的返回结果、标记服务器端的处理是否正常、通知出现的错误等工作
-200  ——  OK
 301  ——  Moved Permanently
 403  ——  Forbidden
 404  ——  Not Found
 500  ——  Internal Sever Error
  Ajax异步请求
·表单
-HTML <form> 元素表示了文档中的一个区域，此区域包含有交互控制元件，用来向 Web 服务器提交信息
·· action    ——  一个处理此表单信息的程序所在的 URL
·· method  ——  浏览器使用这种 HTTP 方式来提交表单
·· enctype ——  将表单的内容提交给服务器的 MIME 类型
·表单提交
-enctype
··当 method 属性值为 get时, enctype 的取值为:
···application/x-www-form-urlencoded: 未指定属性时的默认值
··当 method 属性值为 post 时, enctype 可能的取值有:
···application/x-www-form-urlencoded: 未指定属性时的默认值
···multipart/form-data: 用于一个 type 属性设置为 "file" 的 <input> 元素
···text/plain (HTML5)
·Ajax（Asynchronous Javascript And XML）
-Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新
-Ajax 技术与数据格式无关
·Ajax 是一种用来改善用户体验的技术，其实质就是使用XMLHttpRequest 对象异步的向服务器发送请求。
·XMLHttpRequest 原型链
XMLHTTPRequest=>XMLHTTPRequestEventTarge=>EventTarget=>Function.prototype=>Object.prototype
XMLHttpRequest.prototype=>XMLHttpRequestEventTarget.prototype=>EventTarget.prototype=>Object.prototype
·步骤
-创建 XMLHttpRequest 对象实例
-创建请求
-发送请求
-回调事件处理函数
·创建 XMLHttpRequest 对象的实例
-判断浏览器类型，就得IE浏览器不行
var xhr;
if(window.XMLHttpRequest){
xhr = new XMLHttpRequest();  //主流浏览器
}else{
xhr = new ActiveXObjext(‘Microsoft.XMLHttp’);  //IE浏览器
}
·实例常用的属性
- readyState
··表示XMLHTTPRequest对象的状态：
0：未初始化。对象已创建，未调用open；
1：open方法成功调用，但Sendf方法未调用；
2：send方法已经调用，尚未开始接受数据；
3：正在接受数据，Http响应头信息已经接受，但尚未接收完成；
4：完成，即响应数据接受完成
- status
··服务器返回的Http状态码。200：“成功”；404：“未找到”；500：“服务器内部错误”。
- responseText
··服务器响应的文本内容
··请求响应 json 数据时得到的结果为字符串类型
··JSON.parse(xhr.responseText)解析为 JavaScript 对象
- onreadystatechange
··请求状态改变的事件触发器（readyState变化时会调用这个属性上注册的JavaScript函数）
·实例常用的方法
- open( )
··open(string method, string url, boolean asynch, string username, string password)
··指定和服务器端交互的HTTP方法，URL地址，即其他请求信息；
Method：表示http请求方法，一般使用“GET”，“POST”
URL：表示请求的服务器的地址
Asynch：表示是否采用异步方式，true为异步，false为同步
Username和password分别表示用户名和密码
- setRequestHeader()
·· setRequestHeader(string header, string value)
··设置HTTP请求中的指定头部header的值为value
··需在open方法以后调用，一般在post方式中使用
- send()
··send(content)
··向服务器发出请求，如使用异步方式，该方法会立即返回
··content可以指定为null表示不发送数据，其内容可以是DOM对象，输入流或字符串
·创建请求 open(method,url,bool)
-method —— 请求类型 get / post
-url —— 请求地址
-bool —— 异步/同步请求
··true：表示发送异步请求(当 Ajax 发送请求的时候，用户仍然可以对当前页面做其他操作)；
··false：表示发送同步请求(当 Ajax 发送请求的时候，浏览器会锁定当前页面,用户不能对当前页面做其他操作)
· setRequestHeader() 指定请求的 HTTP 头信息
-xhr.setRequestHeader("Content-Type","application/-www-form-urlencoded");
-POST 请求发送表单数据，把表单数据转换成一个字符串
··POST请求：
···xhr.open('POST' , 'xx.php' , true);
···xhr.setRequestHeader("Content-Type","application/-www-form-urlencoded");
··GET请求：
···xhr.open('GET' , 'xx.php' , true);
·发送请求send()
-send方法内传递提交参数(POST)，没有填写 null
··xhr.send('name=value&name=value');
-若要提交数据，也可在 open 方法的 "URL" 后面追加
··如：xhr.open('GET','xx.php?name=value&name=value',true)
-请求发送到服务器端，收到数据会自动填充实例对象的属性
··readyState：请求状态
··status：服务器返回的 http 请求响应值
··responseText：服务器返回的文本数据
·onreadystatechange:请求状态改变触发器
xhr.onreadystatechange = function(){
	if(xhr.readyState == 4 && xhr.status == 200){
		var txt = xhr.responseText;
               document.write(txt);
		   //DOM操作
	}
}
Ajax-get异步请求
var xhr;	
if(window.XMLHttpRequest){
    xhr = new XMLHttpRequest();
}else{
    xhr = new ActiveXObjext('Microsoft.XMLHttp');
}
xhr.open('get','xx.json',true);
xhr.send(null);
xhr.onreadystatechange = function(){
    if(xhr.readyState == 4 && xhr.status == 200){
	   var txt = xhr.responseText;
              document.write(txt);
	       //DOM操作
	}
}
Ajax-post异步请求
var xhr;	
if(window.XMLHttpRequest){
    xhr=new XMLHttpRequest();
}else{
    xhr=new ActiveXObjext('Microsoft.XMLHttp');
}
xhr.open('post' , 'xx.json' , true);
xhr.setRequestHeader("Content-Type","application/-www-form-urlencoded");
xhr.send(null);
xhr.onreadystatechange=function(){
    if(xhr.readyState == 4 && xhr.status == 200){
	   var txt = xhr.responseText;
              document.write(txt);
	       //DOM操作
	}
}
同源策略
·AJAX 技术使开发者能够专注于互联网中数据的传输。
·但是 AJAX 技术并不是一把万能钥匙，互联网中的数据隐私和数据安全（例如你的银行账号和密码）也非常重要，为了保护某些用户数据的隐私与安全，浏览器使用“同源策略”限制了 AJAX 技术获取数据的范围和能力。  
·但在一些合理的场景中，我们又不得不想办法绕过同源策略，实现跨域请求资源。
·同源策略（Same origin policy）是一种约定，它是浏览器最核心也是最基本的功能。
·同源策略是指：限制不同源之间执行特定操作  
-同源：是指域名、协议、端口都相同
··只要协议、域名、端口有任何一个不同，则都被当作不同的域，不同的源
-特定操作：
1. 读取 Cookie，LocalStorage 等中的数据；
2. 获取 DOM 元素；
3. 发送 AJAX 请求；
同一域名下：
http://www.a.com/a.js
http://www.a.com/b.js
同一域名下不同文件夹
http://www.a.com/lab/a.js
http://www.a.com/script/b.js
同一域名，不同端口
http://www.a.com:8000/a.js
http://www.a.com/b.js
同一域名，不同协议
http://www.a.com/a.js
https://www.a.com/b.js
域名和域名对应IP
http://www.a.com/a.js
http://127.0.0.100/b.js
主域相同，子域不同
http://www.a.com/a.js
http://script.a.com/b.js
同一域名，不用二级域名
http://www.a.com/a.js
http://a.com/b.js
不同域名
http://www.a.com/a.js
http://www.b.com/b.js
·跨域
-请求跨域了，那么请求到底发出去没有？
··跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了。
-通过表单的方式可以发起跨域请求，为什么 Ajax 不可以?
··因为归根结底，跨域是为了阻止用户读取到另一个域名下的内容，Ajax 可以获取响应，浏览器认为这不安全，所以拦截了响应。但是表单并不会获取新的内容，所以可以发起跨域请求。
