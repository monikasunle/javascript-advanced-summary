构造函数三要素
·构造函数定义与调用
-构造函数的首字母必须大写，用来区分于普通函数
-内部使用的 this 对象，来指向即将要生成的实例对象
-使用 new 运算符调用
·实例化与内存
-实例化即创建一个实例对象，分配内存
-执行构造函数即对分配的内存空间进行初始化
·普通函数返回值
-没有 return 语句，默认返回 undefined
-有 return 语句，则返回 return 后面表达式的值
·构造函数返回值
-没有 return 语句，返回 this，即实例对象
-有 return 语句，且返回值为基本数据类型，构造函数会忽略 return 的值，依然返回 this 对象
-有 return 语句，且返回值为引用数据类型，构造函数会返回 return 的值
prototype/__proto__
·实例化越多，占的内存越多
·prototype 属性
-使用者：只有函数才会有 prototype 属性
-创建者：只要创建一个函数 fun，JavaScript 引擎会根据一组特定	的规则为该函数创建一个对象，并初始化有一个属性 constructor，用来引用该函数。
-作用：我们可以通过 prototype 属性使向对象添加属性和方法
· __proto__  属性
-每个实例对象（ object ）都有一个属性 __proto__ 指向它的构造函数的原型对象（prototype ）
-实例对象可以访问这个原型对象中的属性，就像本身拥有该属性一样
·原型对象
-可以看做公共容器，把重复的东西放到公共容器
-定义在原型对象上的属性会让它的所有实例对象都共享这个属性，但是不会在每个实例的内部重新定义这个方法，内存占用就比较小
静态/实例/原型属性
function People(name){
this.name = name;
}
People.index = 1;   —— 静态属性  
People.prototype.hobby = “singing”;    ——原型属性
var per = new People();
per.age = 20;    ——实例属性
·实例对象可以访问本身对象上的实例属性，也可以访问原型对象上的原型属性，但是不能访问构造函数上的静态属性。静态属性只能通过构造函数来访问。
new运算符
·new 运算符
-创建一个空的简单 JavaScript 对象（即 {}）
-该对象会被执行 [[ prototype ]] 连接
-将该对象作为 this 的上下文，并执行构造函数中的代码
-如果构造函数没有返回引用类型，则返回 this 指向的实例对象
·new功能封装
//将构造函数以参数形式传入
function New(func){
//声明一个中间对象，该对象为最终返回的实例
var res = {};
//将实例的原型指向构造函数的原型
res._proto_ = func.prototype;
//ret为构造函数执行的结果,这里通过apply
//将构造函数内部的this指向修改为指向res,即为实例对象
var ret = func.apply(res,Array.prototype.slice.call(arguments,1)); 
//当我们在构造函数中明确指定了返回对象时,那么new的执行结果就是该返回对象
if((typeof ret === “object” || typeof ret === “function”) && ret !== null){
return ret;
}
//如果没有明确指定返回对象,则默认返回res,这个res就是实例对象
return res;
} 
