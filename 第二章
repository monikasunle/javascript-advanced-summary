数据类型分类
·ES5数据类型（6种）及其划分（2类）
-基本（原始）类型（Number、String、Boolean、Null、Undefined）
-引用（对象）类型（Object（Array、Function、Date等））
·typeof操作符
-返回一个字符串，表示未经计算的操作数的类型
-typeof （operand）
·数据、变量和类型
-JavaScript中的变量没有类型
-JavaScript中的数据值有类型
-变量可以随时持有任何类型的值
栈堆内存
·栈内存
-存储的值大小固定
-由系统自动分配内存空间
-空间小、运行效率高
·堆内存
-存储的值大小不定，可动态调整
-由程序员通过代码进行分配
-空间大，运行效率相对较低
基本类型的存储
·基本类型的变量是存放在栈区的
··基本类型的值是不可变的
引用类型的存储
·引用类型的值是同时保存在栈内存和堆内存中的对象
基本类型和引用类型的不同
-访问机制
·基本类型的值直接访问
·引用类型的值通过引用访问，不能直接访问
-赋值变量
·基本类型复制 —— 相互独立不影响
·引用类型复制
-比较变量
·基本数据类型与引用类型的比较
··值类型是判断变量的值是否相等（值比较）
··引用类型是判断所指向的内存空间（地址）是否相同（引用比较）
-参数传递
·ECMAScript 中所有函数的参数都是按值来传递的
··基本类型值：把变量里的数据值传递给参数，之后参数和变量互不影响。
··引用类型值：把对象的引用（地址）值传递给参数，参数和对象都指向同一个对象，相互影响。
基本类型：数据值    引用类型：引用地址
类型转换
·类型转换 —— 将值从一种类型转换为另一种类型
 ··隐式类型转换：通常是某些操作的副作用，不易看出
 ··显式类型转换：可以在代码中明显看出
·转换为Number类型规则
-undefined —— NaN
-null —— 0
-false —— 0
-true —— 1
-字符串 —— 字符串中的数字
-空字符串 —— 0
·强制转换为Number类型
-parseInt()、parseFloat()、Number()
NaN（Not a Number）
-表示一个没有意义、不正确的数值
-console.log( typeof  NaN); —— Number
-与自身不相等 —— NaN != NaN
isNaN()函数
-用来检测参数是否为 NaN 值
-参数是 "NaN" 时返回 true，否则返回 false
-isNaN("123abc") —— true
·转换为 String 类型规则
-undefined —— “undefined”
-null —— “null”
-false —— “false”
-true —— “true”
-数字 —— “数字”
·强制转换为String类型
-String()
·转换为Boolean类型规则
-undefined —— false
-null —— false
-0 —— false
-NaN —— false
-其他数字 —— true
-“”（空字符串） —— false
- 非空字符串 —— true
·强制转换为Boolean类型
-Boolean()
逻辑运算符会将数据类型转换为布尔类型之后再做运算
