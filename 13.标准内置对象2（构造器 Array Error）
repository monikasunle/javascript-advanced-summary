Array
·静态方法（ES6）
- Array.from(...) 、Array.isArray(...) 、Array.of(...)等
·原型方法（添加和删除元素—— 破坏性）
-Array.prototype.shift()    Array.prototype.unshift(elem1?,elem2?,...)
-Array.prototype.pop()     Array.prototype.push(elem1?,elem2?,...)
-Array.prototype.splice(start,deleteCount?,elem1?,elem2?)
·原型方法（排序和颠倒元素顺序 —— 破坏性）
-Array.prototype.reverse()
-Array.prototype.sort(compareFunction？) 
·原型方法（合并、切分和连接 —— 非破坏性）
-Array.prototype.concat(arr1?,arr2?,...)
-Array.prototype.slice(begin?,end?) 
-Array.prototype.join(separator?) //注意返回的类型
·原型方法（值的查找 —— 非破坏性）
-Array.prototype.indexOf(searchValue,startIndex?)
-Array.prototype.lastIndexOf(searchElement,startIndex?)
*·原型方法（迭代 —— 非破坏性）
-Array.prototype.forEach(callback,thisValue?) 
-Array.prototype.every(callback,thisValue?)
 Array.prototype.some(callback,thisValue?)  
*·原型方法（迭代-转换方法 —— 非破坏性）
-Array.prototype.map(callback,thisValue?)
-Array.prototype.filter(callback,thisValue?)
*·原型方法（迭代-归约方法 —— 非破坏性）
-Array.prototype.reduce(element,initialValue?)
-Array.prototype.reduceRight(callback,initialValue?)
·forEach  遍历所有元素
·every 判断所有元素是否都符合条件
·some 判断是否有至少一个元素符合条件
·map 对元素重新组装，生成新的数组
·filter 过滤符合条件的元素
Error
·Error
Error
<- f Error(){[native code]}
Object.prototype.toString.call(Error)
<- “[object Function]”
Error.__proto__ === Function.prototype
<- true
·异常
-如果执行的语句中有一句产生错误，后面的语句不会继续执行
·异常捕获（try catch finally）
-try 是必选的，catch和finally两者至少要有其一
-如果没有catch块，程序将会终止
- catch 块指定一个标识符，该标识符保存抛出异常信息
-标识符仅在 catch 块执行时存在；catch 块执行完成后，标识符不再可用
·对所有内置错误，catch 内的错误对象主要有两个属性：
-name ：错误名称
-message ：错误信息的文本描述
-stack(非标准)：当前调用栈：关于导致错误的嵌套调用序列，用于调试目的
·异常抛出（throw  <expression > ）
-抛出一个用户自定义的异常。
-expression 指定了异常的内容，可以为任何的 JavaScript 值
· Error 构造器
-new Error( [message])
-通过 Error 的构造器可以创建一个错误对象。当运行时错误产生时，Error 的实例对象会被抛出
·ECMAScript 定义了七种类型的错误。
-Error
-ReferenceError: 引用错误
-TypeError: 类型错误
- RangeError: 范围错误
-SyntaxError: 语法错误
-EvalError: Eval错误   
-URIError: URI错误
·Error 是基类型，其他错误类型都继承自该类型。
